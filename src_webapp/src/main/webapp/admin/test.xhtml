<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition xmlns="http://www.w3c.org/1999/xhtml"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:ng="http://xmlns.jcp.org/jsf/passthrough"
                xmlns:p="http://primefaces.org/ui"
                template="/WEB-INF/templates/main.xhtml">
    <ui:define name ="content">
        <h:form >
            <p:panel header="Security Test Page" style="margin-top: 80px; margin-right: 20px; float: left;">
                <p>You can use the following buttons to test the security settings for specific user roles</p>
                <p>If the currently logged on user does not have the denoted role, an AccessDeniedException is thrown.</p>
                <h:panelGrid columns="3">
                    <p:commandButton action="#{securityTestBean.doPlayerAction}" value="PLAYER" update="okDialog"/>
                    <p:commandButton action="#{securityTestBean.doManagerAction}" value="GAME MANAGER" update="okDialog"/>
                    <p:commandButton action="#{securityTestBean.doAdminAction}" value="ADMIN" update="okDialog" />
                </h:panelGrid>
            </p:panel>

            <p:panel header="Max-Length Vulnerability Test"  style="margin-top: 20px; margin-right: 20px; float: left;;" >
                <p>This panel allows to illustrate a vulnerability present in PrimeFaces until at least version 8.0 with a planned fix in version 9.0. <a href="https://github.com/primefaces/primefaces/issues/5869">Reported by TobiasDick as PrimeFaces issue #5869</a>. We would like to thank Tobias for pointing us towards this issue relevant for our project.</p>
                <p>The text input field below is restricted to only accept text input with a maximum length of 10. Affected PrimeFaces versions do not check the input's maximum length server-side, allowing for a basic JS-based hack to override the client-side setting and thus submit longer strings.</p>
                <p:inputText value="#{securityTestBean.testString}" maxlength="10" />
                <p:commandButton type="submit" value="Submit" update="@all" />
                <p:commandButton type="submit" value="Hack" update="@all" onclick="document.querySelector('input[maxlength=&quot;10&quot;]').value = 'CHANGED TEXT BEYOND THE INTENDED LENGTH OF 10 CHARACTERS!';" />
                <p>This submitted String should never be longer than 10 characters: <h:outputText value="#{securityTestBean.testString}"/></p>
                <p><h:outputText value="BUT IT IS NOW!!! And it has been set in the backing bean." style="color:red; font-weight: bold;" rendered="#{securityTestBean.testString.length() gt 10}"/></p>
            </p:panel>

            <p:dialog id="okDialog" header="Success!" widgetVar="okDialog" width="400px" height="300px" visible="#{securityTestBean.showOkDialog}">
                <p>You could successfully call the action <strong><h:outputText value="#{securityTestBean.performedAction}"/></strong>.</p>
                <p:commandButton value="Close" action="#{securityTestBean.doHideOkDialog}" update="okDialog"/>
            </p:dialog>

            <p:ajaxExceptionHandler type="org.springframework.security.access.AccessDeniedException"
                                    update="accessDeniedExceptionDialog"
                                    onexception="PF('accessDeniedExceptionDialog').show();" />

            <p:dialog id="accessDeniedExceptionDialog" header="Access Denied Exception occured!" widgetVar="accessDeniedExceptionDialog" width="800px" height="500px">
                <strong>Message:</strong> #{pfExceptionHandler.message} <br/>
                <strong>StackTrace:</strong><br/>
                <div style="width: 750px; height: 400px; overflow-x: scroll; white-space: nowrap;"><h:outputText value="#{pfExceptionHandler.formattedStackTrace}" escape="false"/></div><br/>
                <p:button value="Close" onclick="PF('accessDeniedExceptionDialog').hide();"/>
            </p:dialog>

        </h:form>
    </ui:define>
</ui:composition>
